#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char board[256];

void voidBoard(char* b, int row, int col){
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            b[i*col + j] = ' ';
        }
    }
    //printf("\n");
}

void Labirint(char* b, int row, int col){
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            if((i == 0) || (j == 0 && i >=3) || (i == 15) || (j == 15 && i <= 13)||(i >= 1 && i <= 6 && j == 5) || (i>=9 && i<= 15 && j == 10))
                b[i*col + j] = '#';
            else if((i >= 10 && i <= 12 && j == 9) || (i == 4 && j>=11 && j<=13))
                b[i*col + j] = '$';
            else if(i == 14 && j == 7)
                b[i*col + j] = '!';
            else if((i >= 1 && i <= 2 && j == 0) || (i >= 12 && i >=14 && j == 15))
                b[i*col + j] = ' ';
        }
    }
}

void printLabirint(char* b, int row, int col){
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            printf("%c", b[i*col+j]);
        }
        printf("\n");
    }
}


void start(char* b, int row, int col){

    char snake = '.';

    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            if(j == 0 && b[i*col + j] == ' ' && b[(i+1)*col + j] != ' ')
                b[i*col + j] = snake;
        }
    }
}

void Death(){
    printf("Purtroppo sei morto!");
    exit(0);
}

void Success(){
    printf("Congratulazioni! Sei arrivato a destinazione!");
    exit(0);
}

void WrongInput(){
    printf("Input non corretto, riinserirlo.");
}

void Moving(char* b, int row, int col){

    char move;
    int currentPosition = 32;
    do{
        scanf(" %c", &move);
        switch(move){
            case 'N':
                if ((b[currentPosition -16] == ' ' || b[currentPosition -16] == '$' || b[currentPosition -16] == '!') && currentPosition -16 != 239){ //se la posizione sopra la posizione attuale è parte del campo
                    b[currentPosition] = '.';
                    b[currentPosition - 16] = 'o';
                    currentPosition = currentPosition - 16; //nuova pos. attuale
                    system("clear");
                    printLabirint(&board[0], 16, 16);
                }
                else if (b[currentPosition -16] == '#') { //se la posizione sopra la posizione attuale è una parete
                    Death();
                }
                else if (currentPosition -16 == 239) { //se ho completato il percorso
                    Success();
                }
                break;

            case 'S':
                if ((b[currentPosition +16] == ' ' || b[currentPosition +16] == '$' || b[currentPosition +16] == '!') && currentPosition +16 != 239){ //se la posizione sotto la posizione attuale è parte del campo
                    b[currentPosition] = '.';
                    b[currentPosition + 16] = 'o';
                    currentPosition = currentPosition + 16; //nuova pos. attuale
                    system("clear");
                    printLabirint(&board[0], 16, 16);
                }
                else if (b[currentPosition +16] == '#') { //se la posizione sotto la posizione attuale è una parete
                    Death();
                }
                else if (currentPosition +16 == 239) { //se ho completato il percorso
                    Success();
                }
                break;

            case 'E':
                if ((b[currentPosition +1] == ' ' || b[currentPosition +1] == '$' || b[currentPosition +1] == '!') && currentPosition +1 != 239){ //se la posizione a destra della posizione attuale è parte del campo
                    b[currentPosition] = '.';
                    b[currentPosition + 1] = 'o';
                    currentPosition = currentPosition + 1; //nuova pos. attuale
                    system("clear");
                    printLabirint(&board[0], 16, 16);
                }
                else if (b[currentPosition +1] == '#') { //se la posizione a destra della posizione attuale è una parete
                    Death();
                }
                else if (currentPosition +1 == 239) { //se ho completato il percorso
                    Success();
                }
                break;

            case 'O':
                if ((b[currentPosition - 1] == ' ' || b[currentPosition -1] == '$' || b[currentPosition -1] == '!') && currentPosition -1 != 239){ //se la posizione a sinistra della posizione attuale è parte del campo
                    b[currentPosition] = '.';
                    b[currentPosition - 1] = 'o';
                    currentPosition = currentPosition - 1; //nuova pos. attuale
                    system("clear");
                    printLabirint(&board[0], 16, 16);
                }
                else if (b[currentPosition -1] == '#') { //se la posizione a sinistra della posizione attuale è una parete
                    Death();
                }
                else if (currentPosition -1 == 239) { //se ho completato il percorso
                    Success();
                }
                break;

            default:
                WrongInput();
                break;
        }
    }while(1);

}




int main(){


    voidBoard(&board[0], 16, 16);
    Labirint(&board[0], 16,16);
    start(&board[0], 16, 16);
    printLabirint(&board[0], 16, 16);
    Moving(&board[0], 16, 16);
    printLabirint(&board[0], 16, 16);

    return 0;
}

